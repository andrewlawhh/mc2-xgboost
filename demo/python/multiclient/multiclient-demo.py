import securexgboost as xgb
import os
import numpy as np

HOME_DIR = os.path.abspath('') + "/../../../"
crypto = xgb.CryptoUtils()

# --------------------------------- Setup ----------------------------------------------
# Create an enclave
enclave = xgb.Enclave(HOME_DIR + "build/enclave/xgboost_enclave.signed", log_verbosity=0)

# Client gets a `report` from the server generated by the enclave
enclave.get_remote_report_with_pubkey()

# Client parses the report, and extracts a public key generated by the enclave
enclave_pem_key, enclave_key_size, remote_report, remote_report_size = enclave.get_report_attrs()


######################
###### User 1 ########
######################

# User 1 setup
user1 = xgb.User("user1","userkeys/private_user_1.pem", "user1.crt")
user2 = xgb.User("user2","userkeys/private_user_2.pem", "user2.crt")
user1.set_user()

# Define paths for user1
KEY_FILE_1 = HOME_DIR + "demo/python/multiclient/key1.txt"
training_data_1 = HOME_DIR + "demo/data/agaricus.txt.train"
train_enc_1 = HOME_DIR + "demo/python/multiclient/train1.enc"
test_data = HOME_DIR + "demo/data/agaricus.txt.test"
test_enc_1 = HOME_DIR + "demo/python/multiclient/test1.enc"

# Generate key, encrypt data, send key to enclave
crypto.generate_client_key(KEY_FILE_1)
print("Encrypting user1's file with key {}".format(KEY_FILE_1))
crypto.encrypt_file(training_data_1, train_enc_1, KEY_FILE_1)
crypto.encrypt_file(test_data, test_enc_1, KEY_FILE_1)

sym_key_1 = None
with open(KEY_FILE_1, "rb") as keyfile:
    sym_key_1 = keyfile.read()

# Encrypt user 1's symmetric key using the enclave's public key
enc_sym_key, enc_sym_key_size = crypto.encrypt_data_with_pk(sym_key_1, len(sym_key_1),
                                                            enclave_pem_key, enclave_key_size)

sig, sig_size = crypto.sign_data("userkeys/private_user_1.pem", enc_sym_key, enc_sym_key_size)


with open(user1.certificate, "r") as cert_file:
    user_certificate = cert_file.read()

# adding the client 1's key with user 1's certificate
crypto.add_client_key_with_certificate(user_certificate,
                                       enc_sym_key, enc_sym_key_size,
                                       sig, sig_size)


######################
###### User 2 ########
######################

# User 2 setup
user2.set_user()

KEY_FILE_2 = HOME_DIR + "demo/python/multiclient/key2.txt"
training_data_2 = HOME_DIR + "demo/data/agaricus.txt.train"
train_enc_2 = HOME_DIR + "demo/python/multiclient/train2.enc"
test_enc_2 = HOME_DIR + "demo/python/multiclient/test2.enc"

crypto.generate_client_key(KEY_FILE_2)
print("Encrypting user2's file with key {}".format(KEY_FILE_2))
crypto.encrypt_file(training_data_2, train_enc_2, KEY_FILE_2)
crypto.encrypt_file(test_data, test_enc_2, KEY_FILE_2)

sym_key_2 = None
with open(KEY_FILE_2, "rb") as keyfile:
    sym_key_2 = keyfile.read()

# Encrypt user 2's symmetric key using the enclave's public key
enc_sym_key, enc_sym_key_size = crypto.encrypt_data_with_pk(sym_key_2, len(sym_key_2),
                                                            enclave_pem_key, enclave_key_size)

sig, sig_size = crypto.sign_data("userkeys/private_user_2.pem", enc_sym_key, enc_sym_key_size)


with open(user2.certificate, "r") as cert_file:
    user_certificate = cert_file.read()

crypto.add_client_key_with_certificate(user_certificate,
                                       enc_sym_key, enc_sym_key_size,
                                       sig, sig_size)


# ------------------------------- Begin Computation ------------------------------------------
# Concatenate and load training data
print("Loading both users' data")
dtrain = xgb.DMatrix({"user1": train_enc_1, "user2": train_enc_2}, encrypted=True)

# Load test data
dtest1 = xgb.DMatrix({"user1": test_enc_1}, encrypted=True)
dtest2 = xgb.DMatrix({"user2": test_enc_2}, encrypted=True)

# Set parameters
params = {
        "tree_method": "hist",
        "n_gpus": "0",
        "objective": "binary:logistic",
        "min_child_weight": "1",
        "gamma": "0.1",
        "max_depth": "3",
        "verbosity": "0"
}

# Train
num_rounds = 10
booster = xgb.train(params, dtrain, num_rounds, evals=[(dtrain, "train"), (dtest1, "u1_test"), (dtest2, "u2_test")])

# Get predictions using user 1's test data

user1.set_user()
enc_preds, num_preds = booster.predict(dtest1)
user1_preds = crypto.decrypt_predictions(sym_key_1, enc_preds, num_preds)

# Get predictions using user 2's test data
user2.set_user()
u2_enc_preds, u2_num_preds = booster.predict(dtest2)
user2_preds = crypto.decrypt_predictions(sym_key_2, u2_enc_preds, u2_num_preds)

print("Are the predictions equal?")
print(np.array_equal(user1_preds, user2_preds))
